defmodule FuelCounter do
  @input [
    142_156,
    108_763,
    77236,
    78186,
    110_145,
    126_414,
    115_436,
    133_275,
    132_634,
    82606,
    118_669,
    90307,
    134_124,
    102_597,
    128_607,
    109_214,
    50160,
    72539,
    99033,
    145_334,
    135_409,
    97525,
    109_865,
    142_319,
    79027,
    96924,
    72530,
    85993,
    109_594,
    115_991,
    107_998,
    112_934,
    85198,
    112_744,
    129_637,
    95515,
    90804,
    107_052,
    89707,
    93658,
    60115,
    118_752,
    94315,
    59645,
    115_668,
    139_320,
    70734,
    56771,
    74741,
    69284,
    92228,
    145_376,
    103_317,
    55143,
    58370,
    54873,
    52424,
    95392,
    67892,
    90858,
    74693,
    77363,
    51496,
    79375,
    71206,
    103_492,
    94065,
    72084,
    144_311,
    67381,
    129_958,
    86741,
    148_906,
    123_383,
    147_575,
    136_327,
    118_108,
    136_529,
    66356,
    70746,
    147_569,
    107_267,
    122_434,
    69688,
    122_127,
    94072,
    110_203,
    50546,
    57836,
    139_334,
    113_240,
    96729,
    68516,
    74635,
    126_951,
    138_948,
    88312,
    101_477,
    129_730,
    93816
  ]

  def solve() do
    @input
    |> Enum.map(&fuel_needed/1)
    |> Enum.sum()
  end

  def count(value) do
    Integer.floor_div(value, 3) - 2
  end

  def fuel_needed(value) do
    count(value)
    |> calc_fuel_for_fuel()
  end

  def calc_fuel_for_fuel(sum) do
    calc_fuel_to_zero(sum, sum)
  end

  def calc_fuel_to_zero(sum, last) do
    fuel = count(last)

    case fuel do
      x when x <= 0 -> sum
      _ -> calc_fuel_to_zero(sum + fuel, fuel)
    end
  end
end
